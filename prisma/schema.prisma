// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///////////////////////////////////////////////////////////////////////
// User
///////////////////////////////////////////////////////////////////////

model User{
  id                  Int        @id @default(autoincrement())
  email               String     @unique
  password            String
  passwordSalt        String?    
  name                String
  dateCreated         DateTime  @default(now())

  ticketsCreated      Ticket[]
  ticketsUpvoted      Int[]

  @@map("user")
}

///////////////////////////////////////////////////////////////////////
// Ticket
///////////////////////////////////////////////////////////////////////

model Ticket {
  ticketId            Int       @id @default(autoincrement())
  ticketStatus        String
  ticketCreateDate    DateTime  @default(now())
  ticketCloseDate     DateTime?
  ticketType          String
  ticketStreetAddress String
  ticketCity          String?
  ticketLocation      String    //place-id
  ticketLong          Float
  ticketLat           Float
  ticketCost          Float?
  ticketDescription   String
  ticketRepairTime    Int?
  ticketUpvotes       Int

  techTeam            TechTeam? @relation(fields: [assignedTechTeam] , references: [id])
  assignedTechTeam    Int?

  user                User @relation(fields: [userId] , references: [id], onDelete: Cascade) // user who created ticket
  userId              Int

  Subtasks            Subtasks[]
  Picture             Picture[]

  @@map("ticket")
  
}

///////////////////////////////////////////////////////////////////////
// Picture
///////////////////////////////////////////////////////////////////////

model Picture {
  pictureId         Int       @id @default(autoincrement())
  pictureLink       String
  ticket            Ticket    @relation(fields: [ticketID], references: [ticketId], onDelete: Cascade)
  ticketID          Int

  @@map("picture")
}

///////////////////////////////////////////////////////////////////////
// Subtasks
///////////////////////////////////////////////////////////////////////

model Subtasks{
  subtaskId         Int       @id @default(autoincrement())
  tickets           Ticket    @relation(fields: [ticketID], references: [ticketId], onDelete: Cascade)
  ticketID          Int
  taskDescription   String
  taskStep          Int
  taskStatus        String

  @@map("subtasks")
}

///////////////////////////////////////////////////////////////////////
// TechTeam
///////////////////////////////////////////////////////////////////////

model TechTeam {
  id                Int       @id @default(autoincrement())
  name              String
  email             String?   @unique
  specialisation    String[]
  contactNumber     String    @unique @db.VarChar(10)
  nrJobsCompleted   Int?
  ratingOfJobs      Float?

  assignedTickets  Ticket[]

  password          String
  passwordSalt      String?    
  dateCreated       DateTime  @default(now())

  @@map("techteam")
}

///////////////////////////////////////////////////////////////////////
// AuthorizedOfficials
///////////////////////////////////////////////////////////////////////

model AuthorizedOfficials {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  contactNumber   String      @unique @db.VarChar(10)
  cities          String[]

  password        String
  passwordSalt    String?    
  dateCreated     DateTime    @default(now())
  
  @@map("authorizedofficials")
}
